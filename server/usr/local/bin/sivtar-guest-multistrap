#!/bin/bash
id=sivtar-$(TZ=GMT date '+%Y%m%dT%H%M%S.%NZ')
sivtar=/home/pip/git/sivtar
share=${sivtar}/guest/usr/local/share/sivtar
config=config.263
apt_cacher_port=3142
authorized_key=authorized_key
debdir=/home/pip/sivtar-debs

export LANG=C
export DEBIAN_FRONTEND=noninteractive
export DEBCONF_NONINTERACTIVE_SEEN=true
# sigh. multistrap calls "apt-get -o Dir::Etc=...", but that doesn't
# do anything, since APT parses the command line AFTER reading the etc
# dir.  The only way to get it to read a different etc dir appears to
# be to create a temporary file containing a "Dir::Etc "...";"
# directive and setting that in the APT_CONFIG environment variable.

mkdir -p ${id}/tmp/multistrap
cat <<EOF > ${id}/tmp/multistrap/apt.conf
Dir::Etc "$(pwd)/${id}/etc/apt/";
Dir::Etc::Parts "$(pwd)/${id}/etc/apt/apt.conf.d/";
Dir::Etc::PreferencesParts "$(pwd)/${id}/etc/apt/preferences.d/";
EOF

mkdir -p ${id}/var/lib/apt/lists
cp -av /var/lib/apt/lists/* ${id}/var/lib/apt/lists

mkdir -p ${id}/etc/apt/apt.conf.d
cat <<EOF > ${id}/etc/apt/apt.conf.d/80ac
Acquire::http { Proxy "http://localhost:${apt_cacher_port}"; };
EOF

cat <<EOF > ${id}/etc/apt/apt.conf.d/defaults
Debug::Acquire { http "true"; };
Acquire::PDiffs { SizeLimit "0"; };
EOF

mkdir -p ${id}/etc/apt/sources.list.d/
cat <<EOF > ${id}/etc/apt/sources.list.d/local.list
deb http://ftp.debian.org/debian unstable main
deb http://ftp.debian.org/debian unstable non-free
deb http://ftp.debian.org/debian unstable contrib
EOF

APT_CONFIG="${id}/tmp/multistrap/apt.conf" multistrap -d ${id} -f /dev/stdin <<EOF
[General]
unpack=true
noauth=true
cleanup=true
bootstrap=LocalDebian
ignorenativearch=true

[LocalDebian]
packages=eatmydata
packages=sudo
packages=locales
packages=apt-utils
packages=dselect
packages=dctrl-tools
packages=aptitude
packages=sysvinit
packages=sysvinit-core
packages=bash
packages=adduser
packages=aufs-tools
packages=chkconfig
source=http://ftp.debian.org/debian
suite=unstable
EOF

mount --bind /dev ${id}/dev
mkdir -p ${id}/var/lib/apt/lists
cp -a /var/lib/apt/lists/* ${id}/var/lib/apt/lists
mkdir -p ${id}/etc/apt/sources.list.d/
cat <<EOF > ${id}/etc/apt/apt.conf.d/80ac
Acquire::http { Proxy "http://localhost:${apt_cacher_port}"; };
EOF
cat <<EOF > ${id}/etc/apt/sources.list.d/local.list
deb http://ftp.debian.org/debian unstable main
deb http://ftp.debian.org/debian unstable non-free
deb http://ftp.debian.org/debian unstable contrib
EOF

chroot ${id} /bin/bash <<EOF
mount -t proc proc proc
mount -t sysfs sys sys
mount -t tmpfs tmpfs /run
mkdir /run/lock
mount -t tmpfs tmpfs /run/lock

dpkg-divert --package dash --divert /bin/sh.distrib --add /bin/sh
dpkg-divert --package dash --divert /usr/share/man/man1/sh.distrib.1.gz --add /usr/share/man/man1/sh.1.gz

dpkg --configure -a

apt-get update
apt-get install sysvinit
apt-cache dumpavail | dpkg --merge-avail
EOF

cat ${share}/${config}/dpkg/selections | chroot ${id} dpkg --set-selections
cat ${share}/${config}/chkconfig/list | chroot ${id} chkconfig -s
cat ${share}/${config}/apt-mark/automark | chroot ${id} xargs apt-mark auto

chroot ${id} /bin/bash <<EOF
apt-get --force-yes -y -m dselect-upgrade
dpkg --configure -a

adduser --disabled-password sivtar < /dev/null
passwd -d root
passwd -d sivtar
EOF

# save configuration files which we overwrite. skip this for now.
# (cd ${sivtar}/guest; tar -c .) | tar -t | egrep -v '\/$' | while read; do if [ -f "$REPLY" ]; then echo "$REPLY"; fi; done | (cd ${id}; tar -cT -) > ${id}-orig.tar
(cd ${sivtar}/guest; tar -c .) | (cd ${id}; tar -x)

mkdir -p ${id}/root/.ssh
mkdir -p ${id}/home/sivtar/.ssh
cat "${authorized_key}" > ${id}/root/.ssh/authorized_keys
cat "${authorized_key}" > ${id}/home/sivtar/.ssh/authorized_keys

chroot ${id} /bin/bash <<EOF
chown root.root -R /etc /sbin /usr
chown root.root /home
chmod u+s /usr/bin/sudo
chown sivtar.sivtar -R /home/sivtar
EOF

chroot ${id} /bin/bash <<EOF
mkdir /mnt/etc
mkdir /mnt/root
mkdir /mnt/root/oldroot
mkdir /mnt/root/oldroot2
mkdir /mnt/root/oldroot3
mkdir /mnt/newroot
mkdir /mnt/roots
mkdir /mnt/git
mkdir /mnt/cpan
mkdir /mnt/control
EOF

cp "${debdir}"/*.deb ${id}/root

chroot ${id} /bin/bash <<EOF
dpkg -i ~/*.deb
chmod a+x /usr/share/initramfs-tools/hooks/*
chmod a+r /boot/vmlinuz-*
update-initramfs -c -k 4.0.0
EOF

chroot ${id} /bin/bash <<EOF
umount -l /run
umount -l /sys
umount -l /dev
umount -l /proc
EOF

# http://unix.stackexchange.com/questions/191662/how-do-i-replicate-installed-package-selections-from-one-debian-system-to-anothe
